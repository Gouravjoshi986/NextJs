# Minor inconviniences caused by react are: 
* It is not SEO Optimized. Cant be detected by crawlers as you dont inject your data in a html file directly rather you keep it in js files and when run on browser the html is injected. 
This makes it hard for crawlers to categorize your files and index/List them. 
* Waterfalling probelm -> one request triggers the call of other request which in turn trigger the call of other requests. which makes it slow as all the time of requests add up. 

The "waterfalling problem" in React, and more broadly in web development, refers to a scenario where data fetching operations are chained or dependent on each other in a way that leads to inefficient loading behavior.

* Seperate files for both frontend and backend. 
* Doesnt provide routing out of the box. 

# Next JS offerings
Server side rendering - Get’s rid of SEO problems
API routes - Single codebase with frontend and backend
File based routing (no need for react-router-dom)
Bundle size optimisations, Static site generation
Maintained by the Vercel team

* Downsides : 
Can’t be distributed via a CDN, always needs a server running that does server side rendering and hence is expensive
Very opinionated, very hard to move out of it

* for creating a next app use command npx create-next-app@latest 
* then you will spend most of your time in the app folder of next js. 
# File Based Router 
* next js uses file based router eg. the way you create files and folders decides how will a route be created.   eg in the app main directory there is a page.tsx by default which is the page which renders at home or / page. 
* if a folder called signup is created and a new page.tsx is created there then the /signup route will be created and the page.tsx will be rendered there 


You’ll notice a file in your app folder called layout.tsx
Layouts let you wrap all child pages inside some logic. 
Any component or code that you add in layout will render along all the pages that comes under that route.

For adding components along a specific route create a layout.tsx file in that route folder and add component.  
* Adding a layout to root directory will result in it being added to every page. 

# Merging Routes
What if you wan’t to get the banner in both signup and signin? 
* You can either do this by creating a folder auth and putting sign up and sign in inside it and add a layout.tsx in the auth folder. But this will affect the route and make it auth/signup.    
* Better approach would be to create a folder with *(auth)* Parenthesis outside it. This will tell the router to ignore this folder and not include it in route.The routes will remain as 
 /signup.